FROM fpco/stack-build:lts-18.6

# The purpose of this image is to collect backend build artifacts: 
# - server binary
# - generated elm code
# - stack dependencies cache

# Install support for efficient compression
RUN apt-get update
RUN apt-get install pigz

# Install Elm-format to format the generated output (standalone is more reliable and compatible, than NPM version)
RUN curl -L -o elm-format.tgz https://github.com/avh4/elm-format/releases/download/0.8.5/elm-format-0.8.5-linux-x64.tgz
RUN tar -xzf elm-format.tgz
RUN chmod +x elm-format
RUN mv elm-format /usr/local/bin/

# Copy and extract stack dependencies cache (if we have it)
WORKDIR /root
COPY cache/* /root/

# If we had the cache (if it was copied successfully), then delete pre-existing stack cache and extract ours
RUN if \
  test -f stack_dependencies_cache.tar.gz.tar; \
  then rm -rf .stack && \
  tar -xf stack_dependencies_cache.tar.gz.tar && \
  tar -x -Ipigz -f stack_dependencies_cache.tar.gz && \
  rm stack_dependencies_cache.tar.gz.tar && \
  rm stack_dependencies_cache.tar.gz; \
  fi

WORKDIR /app

# Copy sources
COPY src /app/src
COPY Setup.hs stack.yaml stack.yaml.lock notepad.cabal /app/

# Set up ENV variables for compile-time for typed-postgresql
ARG docker_host_ip
ENV TPG_DB=notepad
ENV TPG_USER=admin
ENV TPG_PASS=admin
ENV TPG_HOST=$docker_host_ip
ENV TPG_PORT=5431

# Build the server, saving binaries to ~/.local/bin/
RUN stack build --copy-bins

# Generate Elm code
RUN stack run codegen

# Compress stack dependencies cache 2
WORKDIR /root
RUN tar -c -Ipigz -f stack_dependencies_cache.tar.gz .stack
