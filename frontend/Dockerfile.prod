FROM node:16.6.2 as builder

# Install Elm
RUN curl -L -o elm.gz https://github.com/elm/compiler/releases/download/0.19.1/binary-for-linux-64-bit.gz
RUN gunzip elm.gz
RUN chmod +x elm
RUN mv elm /usr/local/bin/

# Install Elm-format (more reliable and compatible, than NPM version)
RUN curl -L -o elm-format.tgz https://github.com/avh4/elm-format/releases/download/0.8.5/elm-format-0.8.5-linux-x64.tgz
RUN tar -xzf elm-format.tgz
RUN chmod +x elm-format
RUN mv elm-format /usr/local/bin/

# Install production-only dependencies
# Note: uglify-js after 3.9.4 uses different API, which requires refactoring
RUN npm i -g \
  uglify-js@3.9.4 \
  inline-source-cli@2.0.0

WORKDIR /build

# Install NPM dependencies
COPY package.json package-lock.json ./
RUN npm ci

COPY . .

# Validate Elm code formatting
RUN elm-format --validate .

# Run unit tests
RUN npm run test

# Run code review
RUN npm run review

# Compile Elm code
RUN elm make --optimize --output="./bundle.uncompressed.js" src/Main.elm

# Compress Elm bundle
RUN uglifyjs "./bundle.uncompressed.js" \
  --compress 'pure_funcs="F2,F3,F4,F5,F6,F7,F8,F9,A2,A3,A4,A5,A6,A7,A8,A9",pure_getters,keep_fargs=false,unsafe_comps,unsafe' \
  --output="./bundle.compressed1.js" 
RUN uglifyjs "./bundle.compressed1.js" \
  --mangle \
  --output="./assets/inline/bundle.js"

# Inline all inlineable assets
RUN bash -c 'inline-source --compress false --root ./ index.src.html > index.html'

FROM nginx:1.21.1-alpine
WORKDIR /usr/share/nginx/html

# Copy bundle and assets to the Nginx container
COPY --from=builder /build/index.html .
COPY --from=builder /build/assets ./assets
RUN rm -rf assets/inline

# Copy nginx config
COPY ./configs/nginx.prod.conf /etc/nginx/conf.d/default.conf

EXPOSE 80